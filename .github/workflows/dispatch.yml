name: Dispatch

on:
  issues:
    types: 
      - opened

jobs:
  parse-issue-title:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.parse-title.outputs.result }}
    steps:
      - name: Parse issue title
        id: parse-title
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = "${{ github.event.issue.number }}";
            const issueTitle = "${{ github.event.issue.title }}".toLowerCase();
            return issueTitle;
          result-encoding: string
    
  get-content:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.get-sha.outputs.result }}
    steps:
      - name: get sha
        id: get-sha
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const content = await github.rest.repos.getContent({
              owner: "kex-24",
              repo: "kex-24",
              path: "README.md"
            })
            .then(result => {
              const sha = Buffer.from(result.data.sha, 'base64').toString();
              console.log(sha);
              return sha;
            })
          result-encoding: string

  dispatch-to-handler:
    needs: [parse-issue-title, get-content]
    runs-on: ubuntu-latest
    env:
      SHA: "${{ needs.get-content.outputs.result }}"
    if: needs.parse-issue-title.outputs.result != 'none'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/requirements.txt

      - name: generate exercise
        run: |
          theme="${{ needs.parse-issue-title.outputs.result }}"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "content<<$EOF" >> "$GITHUB_ENV"
          python .github/workflows/generate_exercise.py README.md theme >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"

      - name: update README
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let sha_ = btoa($SHA);
            await github.rest.repos.createOrUpdateFileContents({
              owner: "kex-24",
              repo: "kex-24",
              path: "README.md",
              message: "Updated README.md",
              content: "${{ env.content }}",
              committer: {
                name: "haaker1",
                email: "haaker.anne@gmail.com",
              },
              author: {
                name: "haaker1",
                email: "haaker.anne@gmail.com",
              },
              sha: sha_
            })

            